[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://u7yi0drfiy7y"]

[sub_resource type="Shader" id="1"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(1000, 1000);
uniform vec2 offset = vec2(0, 0);
uniform float density = 0.1;
uniform float cellPadding = 7;

float random (vec2 st) {
    return abs(
		fract(
			sin(
				dot(
					st.xy,
	                	vec2(12.9898,78.233)
				)
			)*
	        43758.5453123
		)
	);
}

float random2 (vec2 st) {
    return abs(
		fract(
			sin(
				dot(
					st.xy,
	                	vec2(34.81131590056167,22.041429000693906)
				)
			)*
	        1021.0556960401187
		)
	);
}

void fragment() {
	vec2 fc = vec2(
		abs(float(int(FRAGCOORD.x + offset.x) % int(resolution.x))),
		abs(float(int(FRAGCOORD.y + offset.y) % int(resolution.y)))
	);
	
	// Size of each cell
	float cellSize = float(int(15.0 + (1.0 - density) * 100.0));
//	float cellSize = 50.;
	
	// Upper left cell coordinates
	vec2 cell = vec2(
		float(int(fc.x / cellSize)),
		float(int(fc.y / cellSize))
	);

	// Calculate random star center within cell based on
	// cell coordinates
	float xOffset = cellSize * random(cell);
	float yOffset = cellSize * random2(cell);
	// Ensure center is not too close to the edge of a cell
	// otherwise the star can spill over into the nearby cell
	if(xOffset < cellPadding) {
		xOffset = cellPadding;
	}
	if(xOffset > cellSize - cellPadding) {
		xOffset = cellSize - cellPadding;
	}
	if(yOffset < cellPadding) {
		yOffset = cellPadding;
	}
	if(yOffset > cellSize - cellPadding) {
		yOffset = cellSize - cellPadding;
	}
	vec2 starCenter = vec2(cell.x * cellSize + xOffset, cell.y * cellSize + yOffset);
	
	// Calculate the brightness of the star center
	float brightness = random(cell) / 15.0;
	
	// Calculate the brigness of this pixel
	float dist = sqrt(
        (fc.x - float(starCenter.x)) * (fc.x - float(starCenter.x)) +
        (fc.y - float(starCenter.y)) * (fc.y - float(starCenter.y))
    );
	// Cap brightness at 1.0
	float val = exp(-1.0 * dist * dist / (50. * brightness));
	COLOR = vec4(val, val, val, 1.);
	if(int(fc.x / cellSize) == 6 && int(fc.y / cellSize) == 6) {
		float val2 = exp(-1.0 * dist * dist / (50. * brightness));
		COLOR = vec4(val2, val2, val2, 1.);
	}
}
"

[resource]
shader = SubResource("1")
shader_parameter/resolution = Vector2(1000, 1000)
shader_parameter/offset = Vector2(0, 0)
shader_parameter/density = 0.25
shader_parameter/cellPadding = 7.0
